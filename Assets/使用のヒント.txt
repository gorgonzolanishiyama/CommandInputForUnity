本プログラムはサンプルです。
改変、あるいは大幅なリメイクをしないと思ったとおりに動かないと思うので参考情報を記載します。

☆構成
本プログラムは以下の3系統のプログラムから構成されています。(記載はファイル基準)
【文字列からコマンドリストを出力するプログラム】
　KeyList,CommandListStore,Command, CommandConverter, Enum
【コマンド入力とコマンドリストの比較】
　KeyList,InputGazer, CharacterCommand, CommandData,OneFrameButton, Enum
【デバッグ用】
　AutoRoll(くるくる回る)　CanvasとEventSystem(文字表示)　TextChangerとCharacterCommandの一部

☆処理の詳細
インプット確認⇒InputGazerでFixedUpdate内でマイフレーム、インプットを確認しています。またInputGazer内の配列の最初ににインプット内容を追加し、最後を削除します。
コマンドとインプットの評価①⇒コマンドの1段階目が、現状のInputGazer配列にマッチしていたら評価用配列に追加します。
コマンドのマッチ補足⇒50F溜め技の溜め状態は、コマンドInputGazer配列の[0]から[49]を比較しています。
コマンドとインプットの評価②⇒評価用配列を順に評価していき、「コマンドが最後まで入力される」「入力時間をオーバーする」の二種類の評価終了条件があります。
　　　　　　　　　　　　　　　評価終了条件を満たしたら評価用配列から削除します。




☆改変のヒント
①実際に使う
　「CharacterCommand」の「CommamdFprSkill」内の「EvarateAllMatch」にあるDebug.Log(outputWord)を目印に変更を加えてください。animatorとかbroadcastMessageとか･･････
②振り向きについて
　本プログラムでは振り向きは考慮していませんが、CharacterCommandに振り向きをBool値で持っておきinputSetEvent内で逆転させるのがよいかもしれません。
③レスポンス改善について
　本プログラムではキーの読み込みはFixedUpdateを使用しています。
　ただUpdateのほうが更新が多い可能性があるのでレスポンスに不満があった場合はこちらに移すのもありかもしれません。
　その場合は、「溜め」や「コマンドの入力猶予時間」についていろいろ調整が必要になると思います。(だからやらなかった)
④ゲージなどの使用条件
　Mechanimで条件を制御するのが良いと思います。
　(その際にCommandListStoreから変更できるようにするとラクになると思います)

☆変遷とバッドパターン(使用に関係がないので興味のある方のみ見てください)
①Updateによるコマンドのインプット：入力間隔が安定しないので断念。
②正規表現によるコマンド判定：処理が遅くなるので断念。
③一回転コマンド：正規表現を使えないため諦めました。
④コマンド入力判定開始の起点については、「コマンドの最初が入力されたら判定開始」「コマンドの最後が入力されたら時間をさかのぼって確認」の二つを検討しましたが、前者を採用しています。
・前者のメリット：おそらく前者の方が軽いはず　
・後者のメリット：実装が単純で分かり易い





